// FILE: /ifChain.kt
// FUN: minBiRoot
BB 0
CONTENT
      1 FUN public fun minBiRoot(a: kotlin.Double, b: kotlin.Double, c: kotlin.Double): kotlin.Double
      2 WHEN type=kotlin.Unit origin=null
OUTGOING -> BB 1, 6
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
BB 1
INCOMING <- BB 0
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 WHEN type=kotlin.Unit origin=null
OUTGOING -> BB 2, 3
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
BB 2
INCOMING <- BB 1
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 CONST Double type=kotlin.Double value='1.0'
      2 RETURN type=kotlin.Nothing from='minBiRoot(Double, Double, Double): Double'
OUTGOING -> NONE
    Function exit: FUN public fun minBiRoot(a: kotlin.Double, b: kotlin.Double, c: kotlin.Double): kotlin.Double
BB 3
INCOMING <- BB 1
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 CALL 'div(Double): Double' type=kotlin.Double origin=DIV
      2 VAR val bc: kotlin.Double
      3 WHEN type=kotlin.Unit origin=null
OUTGOING -> BB 4, 5
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
BB 4
INCOMING <- BB 3
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
      1 CONST Double type=kotlin.Double value='2.0'
      2 RETURN type=kotlin.Nothing from='minBiRoot(Double, Double, Double): Double'
OUTGOING -> NONE
    Function exit: FUN public fun minBiRoot(a: kotlin.Double, b: kotlin.Double, c: kotlin.Double): kotlin.Double
BB 5
INCOMING <- BB 3
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
      1 CALL 'unaryMinus(): Double' type=kotlin.Double origin=UMINUS
      2 RETURN type=kotlin.Nothing from='minBiRoot(Double, Double, Double): Double'
OUTGOING -> NONE
    Function exit: FUN public fun minBiRoot(a: kotlin.Double, b: kotlin.Double, c: kotlin.Double): kotlin.Double
BB 6
INCOMING <- BB 0
    CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
CONTENT
      1 CALL 'minus(Double): Double' type=kotlin.Double origin=MINUS
      2 VAR val d: kotlin.Double
      3 WHEN type=kotlin.Unit origin=null
OUTGOING -> BB 7, 8
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
BB 7
INCOMING <- BB 6
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
      1 CONST Double type=kotlin.Double value='3.0'
      2 RETURN type=kotlin.Nothing from='minBiRoot(Double, Double, Double): Double'
OUTGOING -> NONE
    Function exit: FUN public fun minBiRoot(a: kotlin.Double, b: kotlin.Double, c: kotlin.Double): kotlin.Double
BB 8
INCOMING <- BB 6
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
      1 CALL 'div(Double): Double' type=kotlin.Double origin=DIV
      2 VAR val y1: kotlin.Double
      3 CALL 'div(Double): Double' type=kotlin.Double origin=DIV
      4 VAR val y2: kotlin.Double
      5 WHEN type=kotlin.Double origin=null
OUTGOING -> BB 9, 10
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
BB 9
INCOMING <- BB 8
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
CONTENT
OUTGOING -> BB 11
    CONST Boolean type=kotlin.Boolean value='true'
BB 10
INCOMING <- BB 8
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
CONTENT
      1 GET_VAR 'y1: Double' type=kotlin.Double origin=null
OUTGOING -> BB 12
    When exit: WHEN type=kotlin.Double origin=null
BB 11
INCOMING <- BB 9
    CONST Boolean type=kotlin.Boolean value='true'
CONTENT
      1 GET_VAR 'y2: Double' type=kotlin.Double origin=null
OUTGOING -> BB 12
    When exit: WHEN type=kotlin.Double origin=null
BB 12
INCOMING <- BB 10, 11
    When exit: WHEN type=kotlin.Double origin=null
CONTENT
      1 VAR val y3: kotlin.Double
      2 WHEN type=kotlin.Double origin=null
OUTGOING -> BB 13, 14
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
BB 13
INCOMING <- BB 12
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
OUTGOING -> BB 15
    CONST Boolean type=kotlin.Boolean value='true'
BB 14
INCOMING <- BB 12
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
      1 CONST Double type=kotlin.Double value='4.0'
OUTGOING -> BB 16
    When exit: WHEN type=kotlin.Double origin=null
BB 15
INCOMING <- BB 13
    CONST Boolean type=kotlin.Boolean value='true'
CONTENT
      1 CALL 'unaryMinus(): Double' type=kotlin.Double origin=UMINUS
OUTGOING -> BB 16
    When exit: WHEN type=kotlin.Double origin=null
BB 16
INCOMING <- BB 14, 15
    When exit: WHEN type=kotlin.Double origin=null
CONTENT
      1 RETURN type=kotlin.Nothing from='minBiRoot(Double, Double, Double): Double'
OUTGOING -> NONE
    Function exit: FUN public fun minBiRoot(a: kotlin.Double, b: kotlin.Double, c: kotlin.Double): kotlin.Double

// END FUN: minBiRoot

// END FILE: /ifChain.kt

