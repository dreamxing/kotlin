// FILE: /cascadeIf.kt
// FUN: compare
BB 0
CONTENT
      1 FUN public fun compare(x: kotlin.Int, y: kotlin.Int): kotlin.Int
      2 WHEN type=kotlin.Int origin=WHEN
OUTGOING -> BB 1, 3
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
BB 1
INCOMING <- BB 0
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
CONTENT
OUTGOING -> BB 2, 4
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
BB 2
INCOMING <- BB 1
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
OUTGOING -> BB 5
    CONST Boolean type=kotlin.Boolean value='true'
BB 3
INCOMING <- BB 0
    CALL 'GT0(Int): Boolean' type=kotlin.Boolean origin=GT
CONTENT
      1 CONST Int type=kotlin.Int value='1'
OUTGOING -> BB 6
    When exit: WHEN type=kotlin.Int origin=WHEN
BB 4
INCOMING <- BB 1
    CALL 'LT0(Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
      1 CONST Int type=kotlin.Int value='-1'
OUTGOING -> BB 6
    When exit: WHEN type=kotlin.Int origin=WHEN
BB 5
INCOMING <- BB 2
    CONST Boolean type=kotlin.Boolean value='true'
CONTENT
      1 CONST Int type=kotlin.Int value='0'
OUTGOING -> BB 6
    When exit: WHEN type=kotlin.Int origin=WHEN
BB 6
INCOMING <- BB 3, 4, 5
    When exit: WHEN type=kotlin.Int origin=WHEN
CONTENT
      1 RETURN type=kotlin.Nothing from='compare(Int, Int): Int'
OUTGOING -> NONE
    Function exit: FUN public fun compare(x: kotlin.Int, y: kotlin.Int): kotlin.Int

// END FUN: compare

// END FILE: /cascadeIf.kt

